#!/bin/bash

pushd $(dirname $0)/.. > /dev/null
ROOT_DIR="$(pwd)"
popd > /dev/null

TARGET_ID="$(cat $ROOT_DIR/scripts/target.id)"

# Exclude attestation?
DO_ATTESTATION="yes"
if [[ "$1" == "--noatt" ]]; then
    DO_ATTESTATION="no"
elif [[ "$1" != "" ]]; then
    echo -e "\e[1;31mInvalid or unknown option '$1'\e[0m"
    exit 1
fi

# Binaries
LBUTILS_DIR="$ROOT_DIR/bin/lbutils"
LBUTILS_BUNDLE="$LBUTILS_DIR.tgz"
LBUTILS="$LBUTILS_DIR/lbutils"
ADMIN_DIR="$ROOT_DIR/bin/adm"
ADMIN_BUNDLE="$ADMIN_DIR.tgz"
ADMIN="$ADMIN_DIR/adm"
SIGNAPP_DIR="$ROOT_DIR/bin/signapp"
SIGNAPP_BUNDLE="$SIGNAPP_DIR.tgz"
SIGNAPP="$SIGNAPP_DIR/signapp"

function cleanBinaries() {
    rm -rf $LBUTILS_DIR
    rm -rf $ADMIN_DIR
}

function expandBinaries() {
    cleanBinaries

    mkdir -p $LBUTILS_DIR
    tar -xzmf $LBUTILS_BUNDLE -C $LBUTILS_DIR

    mkdir -p $ADMIN_DIR
    tar -xzmf $ADMIN_BUNDLE -C $ADMIN_DIR

    mkdir -p $SIGNAPP_DIR
    tar -xzmf $SIGNAPP_BUNDLE -C $SIGNAPP_DIR
}

expandBinaries

FIRMWARE_DIR=$ROOT_DIR/firmware

# File with the current pin
PIN_FILE="$ROOT_DIR/pin.txt"
# File where public keys will be saved after upgrading is done
EXPORT_DIR="$ROOT_DIR/export"
PUBLIC_KEY_FILE="$EXPORT_DIR/public-keys.txt"
PUBLIC_KEY_FILE_JSON="$EXPORT_DIR/public-keys.json"
DEVICE_ATTESTATION_FILE="$ROOT_DIR/device_attestation.json"
ATTESTATION_FILE="$EXPORT_DIR/attestation.json"

# Custom CA plus a custom signature and hash from it (use the signer's)
RSK_CA="$(cat $ROOT_DIR/scripts/rsk-ca.txt)"
RSK_CA_HASH=$($SIGNAPP hash -a $FIRMWARE_DIR/signer.hex | grep "App hash:" | sed "s/App hash: //g")
RSK_CA_SIG="$(cat $FIRMWARE_DIR/signer.hex.sig)"

function error() {
    if [ $? -ne 0 ]; then
        echo -e "\e[1;31m Error comunicating with the dongle. Please check that dongle is onboarded, check connection and restart the process. \e[0m"
        cleanBinaries
        exit 1
    fi
}

function checkForPinFile() {
    if [[ ! -e $PIN_FILE ]]; then
        echo -e "\e[1;31m Pin file '$(basename $PIN_FILE)' not found. \e[0m"
        cleanBinaries
        exit 1
    fi
}

function checkForAttestationFile() {
    if [[ ! -e $DEVICE_ATTESTATION_FILE ]]; then
        echo -e "\e[1;31m Attestation file '$(basename $DEVICE_ATTESTATION_FILE)' not found. \e[0m"
        cleanBinaries
        exit 1
    fi
}

function checkFirmware() {
    # Check for firmware files
    FILES="$FIRMWARE_DIR/signer.hex $FIRMWARE_DIR/signer.icon.hex $FIRMWARE_DIR/signer.hex.sig"
    for f in ${FILES}; do
        if [[ ! -e $f ]]; then
            echo -e "\e[1;31m Firmware file '$(basename $f)' does not exist. \e[0m"
            cleanBinaries
            exit 1
        fi
    done
}

function unlockToMenu() {
    $ADMIN unlock -p$(cat $PIN_FILE) -e
    error
}

function removeSigner() {
    $LBUTILS delete --appName "RSK Sign" --targetId $TARGET_ID > /dev/null 2> /dev/null
    error
}

function installSigner() {
    ICON="$(cat $FIRMWARE_DIR/signer.icon.hex)"
    SIG="$(cat $FIRMWARE_DIR/signer.hex.sig)"
    $LBUTILS load --delete --targetId $TARGET_ID --appFlags 0x00 \
            --fileName $FIRMWARE_DIR/signer.hex \
            --icon "$ICON" \
            --appName "RSK Sign" \
            --appVersion "2.0.0" \
            --path "" \
            --signature "$SIG" > /dev/null 2> /dev/null
    error
}

function createOutputDir() {
    rm -rf $EXPORT_DIR
    mkdir -p $EXPORT_DIR
}

function keys() {
    UNLOCK_OPT="-p$(cat $PIN_FILE)"
    if [[ "$DO_ATTESTATION" == "yes" ]]; then
        UNLOCK_OPT="-u"
    fi

    $ADMIN pubkeys -o $PUBLIC_KEY_FILE $UNLOCK_OPT
    error
}

function attestation() {
    $ADMIN attestation -p$(cat $PIN_FILE) -t $DEVICE_ATTESTATION_FILE -o $ATTESTATION_FILE -c $RSK_CA:$RSK_CA_HASH:$RSK_CA_SIG
    error
}

function verify_attestation() {
    $ADMIN verify_attestation -t $ATTESTATION_FILE -b $PUBLIC_KEY_FILE_JSON
    error
}

echo -e "\e[1;32mWelcome to the powHSM Upgrade for RSK \e[0m"
echo -e "\e[1;32mPlease make sure your HSM is onboarded before continuing with the firmware upgrade.\e[0m"
echo
checkFirmware
checkForPinFile

if [[ "$DO_ATTESTATION" == "yes" ]]; then
    checkForAttestationFile
fi

echo -e "\e[1;33mConnect your ledger.\e[0m"
echo -e "Press [Enter] to continue"
read continue
sleep 2
unlockToMenu
sleep 2
echo
echo -e "\e[1;32mRemoving the old RSK Signer App...\e[0m"
removeSigner
echo -e "\e[1;32mInstalling the new RSK Signer App...\e[0m"
installSigner
echo
echo -e "\e[1;33mApp upgrade complete. Please disconnect and reconnect the device.\e[0m"
echo -e "Press [Enter] to continue"
read continue
sleep 2
createOutputDir
echo

if [[ "$DO_ATTESTATION" == "yes" ]]; then
    echo -e "\e[1;32mGathering attestation\e[0m"
    attestation
    echo
fi

echo -e "\e[1;32mGathering public keys\e[0m"
keys
echo

if [[ "$DO_ATTESTATION" == "yes" ]]; then
    echo -e "\e[1;32mVerifying attestation\e[0m"
    verify_attestation
    echo
fi

echo -e "\e[1;32mpowHSM Upgrade complete.\e[0m"
echo -e "\e[1;33mPlease disconnect the device.\e[0m"
echo
cleanBinaries
exit 0
