#!/bin/bash

pushd $(dirname $0)/.. > /dev/null
ROOT_DIR="$(pwd)"
popd > /dev/null

# HSM binaries directory
HSMBIN_DIR=$ROOT_DIR/hsm

# HSM binaries
HSMSGX_BINARY=hsmsgx
HSMSGX_ENCLAVE_BINARY=hsmsgx_enclave.signed

# Middleware binaries
ADMIN_DIR="$ROOT_DIR/bin/adm_sgx"
ADMIN_BUNDLE="$ADMIN_DIR.tgz"
ADMIN="$ADMIN_DIR/adm_sgx"

function cleanBinaries() {
    rm -rf $ADMIN_DIR
}

function expandBinaries() {
    cleanBinaries

    mkdir -p $ADMIN_DIR
    tar -xzmf $ADMIN_BUNDLE -C $ADMIN_DIR
}

# Potentially existing file with an existing pin
PIN_FILE="$ROOT_DIR/pin.txt"

# Directory where public keys will be saved after onboarding is done
EXPORT_DIR="$ROOT_DIR/export"
PUBLIC_KEY_FILE="$EXPORT_DIR/public-keys.txt"
PUBLIC_KEY_FILE_JSON="$EXPORT_DIR/public-keys.json"
ATTESTATION_FILE="$EXPORT_DIR/attestation.json"

# HSM scripts directory
SCRIPTS_DIR=$ROOT_DIR/scripts

# Directory where the finalized systemd service unit will be saved
SERVICE_DIR=$ROOT_DIR/service

function checkHsmBinaries() {
    # Check for HSM binary files
    FILES="$HSMBIN_DIR/hsmsgx $HSMBIN_DIR/hsmsgx_enclave.signed"
    for f in ${FILES}; do
        if [[ ! -e $f ]]; then
            echo -e "\e[1;31m HSM binary file '$(basename $f)' does not exist. \e[0m"
            cleanBinaries
            exit 1
        fi
    done
}

function error() {
    if [ $? -ne 0 ]; then
        echo -e "\e[1;31m Error comunicating with the dongle. Please check connection and restart the process. \e[0m"
        cleanBinaries
        exit 1
    fi
}

function checkForPinFile() {
    if [[ -e $PIN_FILE ]]; then
        echo -e "\e[1;31m Legacy pin file '$(basename $PIN_FILE)' found. Please backup and remove before continuing. \e[0m"
        cleanBinaries
        exit 1
    fi
}

function selectInstallationDir() {
    while true; do
        echo -e "\e[1;32mEnter the absolute path to the installation directory (empty directory name to abort)\e[0m"
        while true; do
            read -p "> " INSTALL_DIR
            if [[ "$INSTALL_DIR" == "" ]]; then
                echo -e "\e[1;31mAborted.\e[0m"
                exit 1
            fi
            REAL_INSTALL_DIR=$(realpath /fs/$INSTALL_DIR)
            INSTALL_DIR=/$(realpath $REAL_INSTALL_DIR --relative-to=/fs/)

            if [ -d "$REAL_INSTALL_DIR" ]; then
                echo -e "\e[1;31mDirectory exists: $INSTALL_DIR. Try again or enter empty directory name to abort.\e[0m"
            else
                if ! mkdir "$REAL_INSTALL_DIR"; then
                    echo -e "\e[1;31mCould not create directory: $INSTALL_DIR. Try again or enter empty directory name to abort.\e[0m"
                else
                    echo -e "\e[1;33mpowHSM will be installed to $INSTALL_DIR\e[0m"
                    break
                fi
            fi
        done
        echo -e "\e[1;32mProceed? [Y/N]\e[0m"
        read -p "> " proceed
        if [[ "Y" == "$proceed" ]] || [[ "y" == "$proceed" ]]; then
            break;
        else
            rmdir $REAL_INSTALL_DIR
        fi
    done
}

function createServiceUnit() {
    rm -rf $SERVICE_DIR
    mkdir $SERVICE_DIR

    cp $SCRIPTS_DIR/hsmsgx.service $SERVICE_DIR
    # Replace the $HSM_INSTALL_DIR token in the script with the actual installation directory
    sed -i "s|\$HSM_INSTALL_DIR|$INSTALL_DIR|g" $SERVICE_DIR/hsmsgx.service
}

function installPowHsm() {
    mkdir $REAL_INSTALL_DIR/bin
    cp -R $HSMBIN_DIR/* $REAL_INSTALL_DIR/bin
    cp -R $ROOT_DIR/Dockerfile $REAL_INSTALL_DIR/bin
}

function startPowHsm() {
    pushd $REAL_INSTALL_DIR > /dev/null
    bin/$HSMSGX_BINARY bin/$HSMSGX_ENCLAVE_BINARY > /dev/null 2> /dev/null &
    HSMSGX_PID=$!
    popd > /dev/null
}

function stopPowHsm() {
    kill $HSMSGX_PID
}

function createOutputDir() {
    rm -rf $EXPORT_DIR
    mkdir -p $EXPORT_DIR
}

function onboard() {
    $ADMIN onboard
    error
}

function keys() {
    $ADMIN pubkeys -uo $PUBLIC_KEY_FILE
    error
}

function attestation() {
    $ADMIN attestation -o $ATTESTATION_FILE
    error
}

function verify_attestation() {
    $ADMIN verify_attestation -t $ATTESTATION_FILE -b $PUBLIC_KEY_FILE_JSON
    error
}


echo -e "\e[1;32mWelcome to the SGX powHSM Setup for RSK \e[0m"
checkForPinFile
checkHsmBinaries
expandBinaries
selectInstallationDir
createServiceUnit
echo
echo -e "\e[1;32mInstalling the powHSM...\e[0m"
installPowHsm
echo
echo -e "\e[1;32mStarting the powHSM...\e[0m"
startPowHsm
echo
echo -e "\e[1;33mOnboarding the powHSM... \e[0m"
onboard
echo -e "\e[1;33mOnboarding complete.\e[0m"
echo
echo -e "\e[1;32mGathering attestation\e[0m"
createOutputDir
attestation
echo
echo -e "\e[1;32mGathering public keys\e[0m"
keys
echo
echo -e "\e[1;32mVerifying attestation\e[0m"
verify_attestation
echo
echo -e "\e[1;32mStopping the powHSM...\e[0m"
stopPowHsm
cleanBinaries
echo
echo -e "\e[1;32mpowHSM Setup complete. Find the installation in $INSTALL_DIR.\e[0m"
exit 0
