#! /usr/bin/env bash

BUILD_TARGET=build
if [[ "$(basename $0)" == "build-sgx-debug" ]]; then
    BUILD_TARGET=build-debug
elif [[ "$(basename $0)" == "build-sgx-sim" ]]; then
    BUILD_TARGET=build-sim
elif [[ "$(basename $0)" != "build-sgx" ]]; then
    echo "Invalid build script"
    exit 1
fi

if [[ $# -lt 4 ]]; then
    echo "Usage: $0 <checkpoint> <minimum_difficulty> <network> <signers_file>"
    exit 1
fi

if [[ "$3" == "regtest" ]]; then
    NETWORK="REGTEST"
elif [[ "$3" == "testnet" ]]; then
    NETWORK="TESTNET"
elif [[ "$3" == "mainnet" ]]; then
    NETWORK=""
else
    echo "Invalid network '$3'"
    exit 1
fi

pushd $(dirname $0) > /dev/null
BUILD_ROOT=$(pwd)
popd > /dev/null

HSM_ROOT=$(realpath $BUILD_ROOT/../../)

DOCKER_IMAGE=hsm:sgx
source $BUILD_ROOT/../../docker/check-image

BUILD_CMD="\$SGX_ENVSETUP && make clean $BUILD_TARGET CHECKPOINT=$1 TARGET_DIFFICULTY=$2 NETWORK=$NETWORK SIGNERS_FILE=$4"

DOCKER_USER="$(id -u):$(id -g)"

docker run -t --rm --user $DOCKER_USER -w /hsm2/firmware/src/sgx -v ${HSM_ROOT}:/hsm2 ${DOCKER_IMAGE} /bin/bash -c "$BUILD_CMD"

if [[ $? -ne 0 ]]; then
    echo "Build failed"
    exit 1
fi

HOST_BIN=$HSM_ROOT/firmware/src/sgx/bin/hsmsgx
ENCLAVE_BIN=$HSM_ROOT/firmware/src/sgx/bin/hsmsgx_enclave.signed

echo "*******************"
echo "Build successful."
echo "$(realpath $HOST_BIN --relative-to=$HSM_ROOT):"
sha256sum $HOST_BIN | cut -d ' ' -f 1
echo ""
echo "$(realpath $ENCLAVE_BIN --relative-to=$HSM_ROOT):"
$BUILD_ROOT/extract-mrenclave $ENCLAVE_BIN
echo "*******************"
