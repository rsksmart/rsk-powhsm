# Values accepted: gcc, clang
CC = gcc

## Flags generated by the open enclave SDK
OE_CRYPTO_LIB = mbedtls
OE_CRYPTO_LDFLAGS = $(shell pkg-config oeenclave-$(CC) --variable=${OE_CRYPTO_LIB}libs)
OE_CFLAGS = $(shell pkg-config oeenclave-$(CC) --cflags)
OE_LDFLAGS=$(shell pkg-config oeenclave-$(CC) --libs)
OE_INCDIR = $(shell pkg-config oeenclave-$(CC) --variable=includedir)
OE_LIBDIR = $(shell pkg-config oeenclave-$(CC) --variable=libdir)/openenclave
OE_HOST_LDFLAGS=$(shell pkg-config oehost-$(CC) --libs)

## General environment and binary variables
ENCLAVE_NAME = hsm
PLATFORM_NAME = sgx
TRUSTED_NAME = trusted
UNTRUSTED_NAME = untrusted
EXEC_NAME = hsmsgx
BIN_DIR = bin
EXEC_FILE = $(BIN_DIR)/$(EXEC_NAME)
ENCLAVE_UNSIGNED_FILE = $(BIN_DIR)/$(EXEC_NAME)_enclave
ENCLAVE_SIGNED_FILE = $(ENCLAVE_UNSIGNED_FILE).signed

## Sources
SGX_SRC_DIR = src
SGX_TRUSTED_SRC_DIR = $(SGX_SRC_DIR)/$(TRUSTED_NAME)
SGX_UNTRUSTED_SRC_DIR = $(SGX_SRC_DIR)/$(UNTRUSTED_NAME)

## HAL sources
HAL_SRC_DIR = ../hal/$(PLATFORM_NAME)/src
HAL_TRUSTED_SRC_DIR = $(HAL_SRC_DIR)/$(TRUSTED_NAME)
HAL_INCLUDE_DIR = ../hal/include

## PowHSM sources
POWHSM_SRC_DIR = ../powhsm/src

## Common sources
COMMON_SRC_DIR = ../common/src

## Untrusted source files
UNTRUSTED_SRC =  $(sort $(wildcard $(SGX_UNTRUSTED_SRC_DIR)/*.c))

## Trusted source files
TRUSTED_SRC =  $(sort $(wildcard $(SGX_TRUSTED_SRC_DIR)/*.c))
TRUSTED_SRC += $(sort $(wildcard $(HAL_TRUSTED_SRC_DIR)/*.c))
TRUSTED_SRC += $(sort $(wildcard $(POWHSM_SRC_DIR)/*.c))
TRUSTED_SRC += $(sort $(wildcard $(COMMON_SRC_DIR)/*.c))

# Enclave definition files
EDL_FILE = $(SGX_SRC_DIR)/$(ENCLAVE_NAME).edl
CONF_FILE = $(SGX_SRC_DIR)/$(ENCLAVE_NAME).conf

## Object directories
OBJ_DIR = obj

OBJ_TRUSTED_DIR = $(OBJ_DIR)/$(TRUSTED_NAME)
OBJ_TRUSTED_SGX_DIR = $(OBJ_DIR)/$(TRUSTED_NAME)/sgx
OBJ_TRUSTED_HAL_DIR = $(OBJ_DIR)/$(TRUSTED_NAME)/hal
OBJ_TRUSTED_POWHSM_DIR = $(OBJ_DIR)/$(TRUSTED_NAME)/powhsm
OBJ_TRUSTED_COMMON_DIR = $(OBJ_DIR)/$(TRUSTED_NAME)/common

OBJ_UNTRUSTED_DIR = obj/$(UNTRUSTED_NAME)

## Objects
UNTRUSTED_OBJS = $(patsubst %.c,$(OBJ_UNTRUSTED_DIR)/%.o,$(notdir $(UNTRUSTED_SRC)))
TRUSTED_OBJS =  $(patsubst $(POWHSM_SRC_DIR)/%.c, $(OBJ_TRUSTED_POWHSM_DIR)/%.o,\
				$(patsubst $(COMMON_SRC_DIR)/%.c, $(OBJ_TRUSTED_COMMON_DIR)/%.o,\
				$(patsubst $(HAL_TRUSTED_SRC_DIR)/%.c,$(OBJ_TRUSTED_HAL_DIR)/%.o,\
				$(patsubst $(SGX_TRUSTED_SRC_DIR)/%.c,$(OBJ_TRUSTED_SGX_DIR)/%.o,$(TRUSTED_SRC)))))

## Files generated automatically by the open enclave SDK (and their objects)
# Files used by trusted code
TRUSTED_GENERATED = $(addprefix $(SGX_TRUSTED_SRC_DIR)/$(ENCLAVE_NAME), _t.c _t.h _args.h)
TRUSTED_GENERATED_OBJ = $(OBJ_TRUSTED_SGX_DIR)/$(ENCLAVE_NAME)_t.o
# Files used by untrusted code
UNTRUSTED_GENERATED = $(addprefix $(SGX_UNTRUSTED_SRC_DIR)/$(ENCLAVE_NAME), _u.c _u.h _args.h)
UNTRUSTED_GENERATED_OBJ = $(OBJ_UNTRUSTED_DIR)/$(ENCLAVE_NAME)_u.o

## Trusted and untrusted flags and include directories
CFLAGS_COMMON = -Wall -Wextra -Werror -DHSM_PLATFORM_SGX

INCLUDE_TRUSTED =  -iquote $(HAL_INCLUDE_DIR) -iquote $(SGX_TRUSTED_SRC_DIR)
INCLUDE_TRUSTED += -iquote $(HAL_TRUSTED_SRC_DIR) -iquote $(COMMON_SRC_DIR)
INCLUDE_TRUSTED += -iquote $(POWHSM_SRC_DIR) -I$(SGX_SECP256K1)/include 
CFLAGS_TRUSTED =  $(CFLAGS_COMMON) $(INCLUDE_TRUSTED)
CFLAGS_TRUSTED += $(OE_CFLAGS) -DOE_API_VERSION=2

UTIL_DIR = ../util
include $(UTIL_DIR)/signer.mk
CFLAGS_TRUSTED += $(SIGNER_FLAGS)

INCLUDE_UNTRUSTED = -I$(OE_INCDIR) -iquote $(SGX_UNTRUSTED_SRC_DIR)
CFLAGS_UNTRUSTED = $(CFLAGS_COMMON) $(INCLUDE_UNTRUSTED)

# The seal plugin is what implements the oe_seal APIs. It needs to be linked against the 
# enclave to provide the seal/unseal functionality.
# TODO: the path for the seal plugin is hardcoded to its path whithin the SDK instalation.
# We probably want to include a specific version of the seal plugin in a specific location 
# within the Docker image.
SEAL_PLUGIN=$(OE_LIBDIR)/enclave/objects-RelWithDebInfo/oeseal_gcmaes-lvi-cfg/seal_gcmaes.c.o

.PHONY: clean

all: build

# We always force a clean when building to avoid accidentally using debug builds in
# production. The build is fast enough so we should be alright.
build: clean check-private-key $(ENCLAVE_SIGNED_FILE) $(EXEC_FILE)

build-debug: CFLAGS_COMMON += -DDEBUG_BUILD
build-debug: CONF_FILE = $(SGX_SRC_DIR)/$(ENCLAVE_NAME)-debug.conf
build-debug: build

build-sim: CFLAGS_COMMON += -DSIM_BUILD -DDEBUG_BUILD
build-sim: CONF_FILE = $(SGX_SRC_DIR)/$(ENCLAVE_NAME)-sim.conf
build-sim: build

check-private-key:
	@if [ ! -f private.pem ]; then \
		echo "Private key not found! Please place your private key in a private.pem file."; \
		echo "You can generate a new key by running make generate-private-key"; \
		exit 1; \
	fi \

generate-private-key:
	openssl genrsa -out private.pem -3 3072

$(EXEC_FILE): LDFLAGS += $(OE_HOST_LDFLAGS)
$(EXEC_FILE): $(UNTRUSTED_OBJS) $(UNTRUSTED_GENERATED_OBJ)
	@mkdir -p $(shell dirname $@)
	$(CC) -o $@ $^ $(LDFLAGS)

$(ENCLAVE_SIGNED_FILE): $(ENCLAVE_UNSIGNED_FILE) private.pem
	@mkdir -p $(shell dirname $@)
	oesign sign -e $< -c $(CONF_FILE) -k private.pem

$(ENCLAVE_UNSIGNED_FILE): LDFLAGS += $(OE_LDFLAGS) $(OE_CRYPTO_LDFLAGS) -lsecp256k1 -L$(SGX_STATIC_LIBS)
$(ENCLAVE_UNSIGNED_FILE): $(TRUSTED_OBJS) $(TRUSTED_GENERATED_OBJ) $(SEAL_PLUGIN)
	@mkdir -p $(shell dirname $@)
	$(CC) -o $@ $^ $(LDFLAGS)

$(TRUSTED_GENERATED_OBJ): $(TRUSTED_GENERATED)
	@mkdir -p $(shell dirname $@)
	$(CC) -c $(CFLAGS_TRUSTED) $< -o $@

$(UNTRUSTED_GENERATED_OBJ): $(UNTRUSTED_GENERATED)
	@mkdir -p $(shell dirname $@)
	$(CC) -c $(CFLAGS_UNTRUSTED) $< -o $@

$(OBJ_TRUSTED_SGX_DIR)/%.o: $(SGX_TRUSTED_SRC_DIR)/%.c $(TRUSTED_GENERATED)
	@mkdir -p $(shell dirname $@)
	$(CC) -c $(CFLAGS_TRUSTED) $< -o $@

$(OBJ_TRUSTED_HAL_DIR)/%.o: $(HAL_TRUSTED_SRC_DIR)/%.c $(TRUSTED_GENERATED)
	@mkdir -p $(shell dirname $@)
	$(CC) -c $(CFLAGS_TRUSTED) $< -o $@

$(OBJ_TRUSTED_POWHSM_DIR)/%.o: $(POWHSM_SRC_DIR)/%.c $(TRUSTED_GENERATED)
	@mkdir -p $(shell dirname $@)
	$(CC) -c $(CFLAGS_TRUSTED) $< -o $@

$(OBJ_TRUSTED_COMMON_DIR)/%.o: $(COMMON_SRC_DIR)/%.c $(TRUSTED_GENERATED)
	@mkdir -p $(shell dirname $@)
	$(CC) -c $(CFLAGS_TRUSTED) $< -o $@

$(OBJ_UNTRUSTED_DIR)/%.o: $(SGX_UNTRUSTED_SRC_DIR)/%.c $(UNTRUSTED_GENERATED)
	@mkdir -p $(shell dirname $@)
	$(CC) -c $(CFLAGS_UNTRUSTED) $< -o $@

$(TRUSTED_GENERATED): $(EDL_FILE)
	@mkdir -p $(shell dirname $@)
	oeedger8r $< --trusted \
		--search-path $(OE_INCDIR) \
		--search-path $(OE_INCDIR)/openenclave/edl/sgx \
		--trusted-dir $(shell dirname $@)

$(UNTRUSTED_GENERATED): $(EDL_FILE)
	@mkdir -p $(shell dirname $@)
	oeedger8r $< --untrusted \
		--search-path $(OE_INCDIR) \
		--search-path $(OE_INCDIR)/openenclave/edl/sgx \
		--untrusted-dir $(shell dirname $@)

clean:
	rm -rf $(BIN_DIR) $(OBJ_DIR) $(DEP_DIR) $(TRUSTED_GENERATED) $(UNTRUSTED_GENERATED)
