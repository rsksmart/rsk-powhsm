# The MIT License (MIT)
#
# Copyright (c) 2021 RSK Labs Ltd
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from unittest import TestCase
from parameterized import parameterized
from sgx.envelope import SgxAttributes, \
                         SgxReportData, \
                         SgxReportBody, \
                         SgxEcdsa256Signature, \
                         SgxEcdsa256Key, \
                         SgxQuote, \
                         SgxQuoteTail, \
                         SgxQuoteAuthData, \
                         SgxQeCertData, \
                         SgxQeAuthData, \
                         SgxEnvelope

import logging

logging.disable(logging.CRITICAL)

TEST_ENVELOPE = """

"""

TEST_MESSAGE = "746869732069732061206d657373616765"


class TestSgxQeAuthData(TestCase):
    def test_parses_ok(self):
        parsed = SgxQeAuthData(bytes.fromhex("0a00112233445566778899aa"))
        self.assertEqual(10, parsed.size)
        self.assertEqual(bytes.fromhex("112233445566778899aa"), parsed.data)

    def test_parses_error_tooshort(self):
        with self.assertRaises(ValueError):
            SgxQeAuthData(bytes.fromhex("0a0baabbcc"))


class TestSgxQeCertData(TestCase):
    def test_parses_ok(self):
        certs = \
b"""
-----BEGIN CERTIFICATE-----
this is certificate one
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
this is certificate two
-----END CERTIFICATE-----
"""
        parsed = SgxQeCertData(
            bytes.fromhex("1122") +
            len(certs).to_bytes(4, byteorder="little", signed=False) +
            certs
        )
        self.assertEqual(0x2211, parsed.type)
        self.assertEqual(certs, parsed.data)
        self.assertEqual(2, len(parsed.certs))

    def test_parses_error_tooshort(self):
        with self.assertRaises(ValueError):
            SgxQeAuthData(bytes.fromhex("0a0baabbcc"))


class TestSgxEnvelope(TestCase):
    def test_parses_ok(self):
        envelope = SgxEnvelope(
            bytes.fromhex(TEST_ENVELOPE),
            bytes.fromhex(TEST_MESSAGE)
        )

        self.assertEqual(TEST_MESSAGE, envelope.custom_message.hex())

    def test_parsing_fails_if_message_mismatch(self):
        with self.assertRaises(ValueError):
            SgxEnvelope(bytes.fromhex(TEST_ENVELOPE), b"some-other-message")


class TestSgxStructs(TestCase):
    # Sizes taken from OpenEnclave's include/openenclave/bits/sgx/sgxtypes.h
    # sgx_quote_t is smaller due to not including the last field (signature_len)
    @parameterized.expand([
        ("sgx_attributes_t", SgxAttributes, 16),
        ("sgx_report_data_t", SgxReportData, 64),
        ("sgx_report_body_t", SgxReportBody, 384),
        ("sgx_ecdsa256_signature_t", SgxEcdsa256Signature, 64),
        ("sgx_ecdsa256_key_t", SgxEcdsa256Key, 64),
        ("sgx_quote_t", SgxQuote, 432),
        ("sgx_quote_tail_t", SgxQuoteTail, 4),
        ("sgx_quote_auth_data_t", SgxQuoteAuthData, 576),
    ])
    def test_sizes_ok(self, _, kls, exp_len):
        self.assertEqual(exp_len, kls.get_bytelength())
