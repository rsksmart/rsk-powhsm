/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2021 RSK Labs Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#ifndef __COMMUNICATION_H
#define __COMMUNICATION_H

#include <stdbool.h>

/**
 * Context reset callback type synonym
 */
typedef void (*comm_reset_cb_t)();

/**
 * Implement the RSK ECHO command.
 *
 * @arg[in]  rx          number of received bytes from the Host
 * @returns              number of transmited bytes to the host
 */
unsigned int echo(unsigned int rx);

/**
 * Implement the RSK MODE command
 * to be used from the bootloader.
 *
 * This always returns bootloader mode.
 *
 * @returns number of transmited bytes to the host
 */
unsigned int get_mode_bootloader();

/**
 * Implement the RSK MODE command
 * to be used from the heartbeat main.
 *
 * This always returns heartbeat mode.
 *
 * @returns number of transmited bytes to the host
 */
unsigned int get_mode_heartbeat();

/**
 * Implement the RSK RETRIES command.
 *
 * Returns the current number of pin retries for the device
 *
 * @returns number of transmited bytes to the host
 */
unsigned int get_retries();

/**
 * Process an exception generated by running a command.
 * This could be used either from the bootloader
 * or from the UI heartbeat main.
 *
 * @arg[in] ex              the exception to process
 * @arg[in] tx              the current APDU buffer size
 * @arg[in] comm_reset_cb   callback to reset the state
 * @returns                 the resulting APDU buffer size
 */
unsigned int comm_process_exception(unsigned short ex,
                                    unsigned int tx,
                                    comm_reset_cb_t comm_reset_cb);

#endif // __COMMUNICATION_H
