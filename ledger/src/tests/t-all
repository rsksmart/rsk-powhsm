#!/usr/bin/env bash

# Script directory
pushd $(dirname $0) > /dev/null

#test all commands
echo "    Note:"
echo "    This command will advance the blockchain and sign a receipt"
echo "    It requires a specific build of the signer"
echo "    For details on the required build parameters, see build-params.txt"
echo "    To use the tcpsigner emulator, run with -p"
read -n 1 -s -r -p "Press any key to continue"
python test.py $1 reset && \
python test.py $1 advance -b resources/advance.json && \
python test.py $1 get && \

python test.py $1 update -b resources/update-iris.json && \
python test.py $1 get && \
python test.py $1 sign -d ./resources/sign-iris.json && \

python test.py $1 update -b resources/update.json && \
python test.py $1 get && \
python test.py $1 sign -d ./resources/sign.json && \

python test.py $1 sign -d ./resources/sign-fail-rcpt-nomatch.json && \
python test.py $1 sign -d ./resources/sign-fail-zero-byte-tx.json && \
python test.py $1 sign -d ./resources/sign-fail-proof-only-receipts-root.json && \
python test.py $1 sign -d ./resources/sign-fail-invalid-path.json && \
python test.py $1 sign -d ./resources/sign-fail-invalid-length.json

[ $? -ne 0 ] && exit 1

# Test malformed coinbase TX block
echo "**************************************************"
echo "***** Testing block with inconsistent length *****"
echo "**************************************************"
python test.py $1 reset && \
python test.py $1 advance --fakelen 0255 -b resources/advance-block-for-malformed-case.json

[ $? -ne 0 ] && exit 1

# Test block with long MM merkle proof
echo "***************************************************"
echo "***** Testing block with long MM merkle proof *****"
echo "***************************************************"
python test.py $1 reset && \
python test.py $1 advance -b resources/advance-long-mmmp.json && \
python test.py $1 get && \
python test.py $1 reset
