#!/usr/bin/env bash

#test all commands
echo "    Note:"
echo "    This command will advance the blockchain and sign a receipt"
echo "    It requires a specific build of the signer"
echo "    For details on the required build parameters, see build-params.txt"
read -n 1 -s -r -p "Press any key to continue"
python test.py reset
python test.py advance -b resources/advance.json
python test.py get

python test.py update -b resources/update-iris.json
python test.py get
python test.py sign -d ./resources/sign-iris.json

python test.py update -b resources/update.json
python test.py get
python test.py sign -d ./resources/sign.json

python test.py sign -d ./resources/sign-fail-invalid-path.json
python test.py sign -d ./resources/sign-fail-invalid-length.json

# Test malformed coinbase TX block
echo "**************************************************"
echo "***** Testing block with inconsistent length *****"
echo "**************************************************"
python test.py reset
python test.py advance --fakelen 0255 -b resources/advance-block-for-malformed-case.json

# Test block with long MM merkle proof
echo "***************************************************"
echo "***** Testing block with long MM merkle proof *****"
echo "***************************************************"
python test.py reset
python test.py advance -b resources/advance-long-mmmp.json
python test.py get
python test.py reset
